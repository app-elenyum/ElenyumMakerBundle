services:
  _defaults:
    autowire: true
    autoconfigure: true

  elenyum_maker:
    public: true
    class: 'Elenyum\Maker\Controller\MakeController'

#  # makes classes in src/ available to be used as services
#  # this creates a service per class whose id is the fully-qualified class name
  Elenyum\Maker\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/ElenyumMakerBundle.php'

  Elenyum\Maker\EventListener\ExceptionListener:
    tags:
      - { name: kernel.event_listener, event: kernel.exception }

  Elenyum\Maker\Service\Module\Entity\ServiceAddProperty:
    tags:
         - {name: 'elenyum.make.entity.create', priority: 100}

  Elenyum\Maker\Service\Module\Entity\ServiceAddValidator:
    tags:
         - {name: 'elenyum.make.entity.create', priority: -100 }

  Elenyum\Maker\Service\Module\Entity\ServiceAddGroup:
    tags:
         - { name: 'elenyum.make.entity.create', priority: -110 }

  Elenyum\Maker\Service\Module\Controller\ServiceAddGetController:
    tags: ['elenyum.make.controller.create']

  Elenyum\Maker\Service\Module\Controller\ServiceAddListController:
    tags: ['elenyum.make.controller.create']

  Elenyum\Maker\Service\Module\Controller\ServiceAddPostController:
    tags: ['elenyum.make.controller.create']

  Elenyum\Maker\Service\Module\Controller\ServiceAddPutController:
    tags: ['elenyum.make.controller.create']

  Elenyum\Maker\Service\Module\Controller\ServiceAddDeleteController:
    tags: ['elenyum.make.controller.create']

  Elenyum\Maker\Service\Module\Handler\ServiceExecuteControllerHandler:
    tags:
        - { name: 'elenyum.make.handler.creator', priority: 10 }
    arguments:
      $options: '%elenyum_maker.config%'
      $controllerServices: !tagged_iterator elenyum.make.controller.create

  Elenyum\Maker\Service\Module\Handler\ServiceExecuteServiceHandler:
    tags:
        - { name: 'elenyum.make.handler.creator', priority: 20 }
    arguments:
      $options: '%elenyum_maker.config%'

  Elenyum\Maker\Service\Module\Handler\ServiceExecuteRepositoryHandler:
    tags:
        - { name: 'elenyum.make.handler.creator', priority: 30 }
    arguments:
      $options: '%elenyum_maker.config%'

  Elenyum\Maker\Service\Module\Handler\ServiceExecuteEntityHandler:
    tags:
        - { name: 'elenyum.make.handler.creator', priority: 40 }
    arguments:
      $entityServices: !tagged_iterator elenyum.make.entity.create
      #     @see ../src/DependencyInjection/ElenyumMakerExtension.php:19
      $options: '%elenyum_maker.config%'

  Elenyum\Maker\Service\Module\ServiceMakeModule:
    arguments:
      $create: !tagged_iterator elenyum.make.handler.creator

  Elenyum\Maker\Service\Module\Handler\ServiceExecuteDoctrineUpdateConfig:
    tags:
      - { name: 'elenyum.make.handler.creator', priority: 50 }
    arguments:
      #     @see ../src/DependencyInjection/ElenyumMakerExtension.php:19
      $options: '%elenyum_maker.config%'

  Elenyum\Maker\Service\Module\ServiceDoctrineSchemaUpdate:
    arguments:
      $entityManagerProvider: '@doctrine.orm.command.entity_manager_provider'
